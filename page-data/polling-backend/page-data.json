{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/polling-backend",
    "result": {"data":{"markdownRemark":{"html":"<blockquote>\n<p>We are going to implement our chat app using long-polling. Open your app to the <a href=\"https://github.com/btholt/complete-intro-to-realtime\">polling/exercise directory</a> and we'll do this together.</p>\n</blockquote>\n<p>Let's do the backend first. Open backend/server.js. Let's acquaint ourselves with the code here.</p>\n<ul>\n<li>If you haven't already, please run npm install in the root of the project</li>\n<li>The backend is done with Express.js. I chose this because nearly every Node.js dev has some familiarity with Express and this isn't a Node.js course. Take Scott Moss's amazing Node.js course if you want more Node.js goodness.</li>\n<li>body-parser allows Express to parse request bodies from the browser</li>\n<li>nanobuffer allows us to create capped collection. Our array will only store the last 50 messages and drop them off the end. We're using this instead of database. This could be written more performantly but I erred on the side of simplicity.</li>\n<li>morgan is a logging library so we can see some nice request logs</li>\n<li>All the frontend code is being served by the <code class=\"language-text\">express.static</code> call</li>\n</ul>\n<p>All the bones of what we need to do are done. We just need to implement the get and the post. We put them on the same URL endpoint but that isn't required. For now the semantic differences of post and get are enough for our little app.</p>\n<p>If you run <code class=\"language-text\">npm run dev</code> it will start the development server with nodemon. This means everytime you save you will automatically restart your server so you can immediately see changes. Do note since all the messages are being stored in memory that it will drop your chat record. That's to be expected; normally you'd store them in a database.</p>\n<p>Okay, let's do our get first.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// replace get</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/poll\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token function\">getMsgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is part of the charm of long-polling: it's just normal API requests done frequently. This is a very normal get request.</p>\n<p>Now have your browser or API request client (like Postman or Insomnia) hit your <a href=\"http://localhost:3000/poll\">http://localhost:3000/poll</a> endpoint and see if it works! You should see a single message come back.</p>\n<p>Okay, the post is pretty similar here, so let's go do that.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// replace post</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/poll\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  currentId<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  msg<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    user<span class=\"token punctuation\">,</span>\n    text<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Awesome! Now try using something like Insomnia to make a post to your new end point with a user and a text and see if it shows up in the get.</p>","frontmatter":{"path":"/polling-backend","title":"Polling Backend","order":"2B","section":"Polling"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"2E","path":"/backoff-and-retry","title":"Backoff and Retry"}}},{"node":{"frontmatter":{"order":"3B","path":"/chat-with-http2-push","title":"Chat with HTTP2 Push"}}},{"node":{"frontmatter":{"order":"5B","path":"/chat-with-socketio","title":"Chat with Socket.IO"}}},{"node":{"frontmatter":{"order":"6A","path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":"3A","path":"/intro-to-http2-push","title":"Intro to HTTP2 Push"}}},{"node":{"frontmatter":{"order":"5A","path":"/socketio","title":"Intro to Socket.IO"}}},{"node":{"frontmatter":{"order":"4A","path":"/intro-to-websockets","title":"Intro to WebSockets"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"2B","path":"/polling-backend","title":"Polling Backend"}}},{"node":{"frontmatter":{"order":"2C","path":"/settimeout","title":"Polling with setTimeout"}}},{"node":{"frontmatter":{"order":"2A","path":"/polling","title":"Intro to Long-Polling"}}},{"node":{"frontmatter":{"order":"2D","path":"/requestanimationframe","title":"Polling with requestAnimationFrame"}}},{"node":{"frontmatter":{"order":"1B","path":"/the-project","title":"The Project"}}},{"node":{"frontmatter":{"order":"4B","path":"/websockets-backend","title":"WebSockets Backend"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["137611351"]}